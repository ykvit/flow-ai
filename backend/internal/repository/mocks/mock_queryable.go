// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"database/sql"

	mock "github.com/stretchr/testify/mock"
)

// newMockqueryable creates a new instance of mockqueryable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockqueryable(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockqueryable {
	mock := &mockqueryable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockqueryable is an autogenerated mock type for the queryable type
type mockqueryable struct {
	mock.Mock
}

type mockqueryable_Expecter struct {
	mock *mock.Mock
}

func (_m *mockqueryable) EXPECT() *mockqueryable_Expecter {
	return &mockqueryable_Expecter{mock: &_m.Mock}
}

// QueryContext provides a mock function for the type mockqueryable
func (_mock *mockqueryable) QueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, query, args)
	} else {
		tmpRet = _mock.Called(ctx, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for QueryContext")
	}

	var r0 *sql.Rows
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (*sql.Rows, error)); ok {
		return returnFunc(ctx, query, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *sql.Rows); ok {
		r0 = returnFunc(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = returnFunc(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockqueryable_QueryContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryContext'
type mockqueryable_QueryContext_Call struct {
	*mock.Call
}

// QueryContext is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *mockqueryable_Expecter) QueryContext(ctx interface{}, query interface{}, args ...interface{}) *mockqueryable_QueryContext_Call {
	return &mockqueryable_QueryContext_Call{Call: _e.mock.On("QueryContext",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *mockqueryable_QueryContext_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *mockqueryable_QueryContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []interface{}
		var variadicArgs []interface{}
		if len(args) > 2 {
			variadicArgs = args[2].([]interface{})
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *mockqueryable_QueryContext_Call) Return(rows *sql.Rows, err error) *mockqueryable_QueryContext_Call {
	_c.Call.Return(rows, err)
	return _c
}

func (_c *mockqueryable_QueryContext_Call) RunAndReturn(run func(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error)) *mockqueryable_QueryContext_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRowContext provides a mock function for the type mockqueryable
func (_mock *mockqueryable) QueryRowContext(ctx context.Context, query string, args ...interface{}) *sql.Row {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, query, args)
	} else {
		tmpRet = _mock.Called(ctx, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for QueryRowContext")
	}

	var r0 *sql.Row
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *sql.Row); ok {
		r0 = returnFunc(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Row)
		}
	}
	return r0
}

// mockqueryable_QueryRowContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRowContext'
type mockqueryable_QueryRowContext_Call struct {
	*mock.Call
}

// QueryRowContext is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *mockqueryable_Expecter) QueryRowContext(ctx interface{}, query interface{}, args ...interface{}) *mockqueryable_QueryRowContext_Call {
	return &mockqueryable_QueryRowContext_Call{Call: _e.mock.On("QueryRowContext",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *mockqueryable_QueryRowContext_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *mockqueryable_QueryRowContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []interface{}
		var variadicArgs []interface{}
		if len(args) > 2 {
			variadicArgs = args[2].([]interface{})
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *mockqueryable_QueryRowContext_Call) Return(row *sql.Row) *mockqueryable_QueryRowContext_Call {
	_c.Call.Return(row)
	return _c
}

func (_c *mockqueryable_QueryRowContext_Call) RunAndReturn(run func(ctx context.Context, query string, args ...interface{}) *sql.Row) *mockqueryable_QueryRowContext_Call {
	_c.Call.Return(run)
	return _c
}

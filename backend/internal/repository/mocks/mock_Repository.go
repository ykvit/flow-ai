// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"database/sql"
	"flow-ai/backend/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// AddMessage provides a mock function for the type MockRepository
func (_mock *MockRepository) AddMessage(ctx context.Context, message *model.Message, chatID string) error {
	ret := _mock.Called(ctx, message, chatID)

	if len(ret) == 0 {
		panic("no return value specified for AddMessage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Message, string) error); ok {
		r0 = returnFunc(ctx, message, chatID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_AddMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMessage'
type MockRepository_AddMessage_Call struct {
	*mock.Call
}

// AddMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - message *model.Message
//   - chatID string
func (_e *MockRepository_Expecter) AddMessage(ctx interface{}, message interface{}, chatID interface{}) *MockRepository_AddMessage_Call {
	return &MockRepository_AddMessage_Call{Call: _e.mock.On("AddMessage", ctx, message, chatID)}
}

func (_c *MockRepository_AddMessage_Call) Run(run func(ctx context.Context, message *model.Message, chatID string)) *MockRepository_AddMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.Message
		if args[1] != nil {
			arg1 = args[1].(*model.Message)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepository_AddMessage_Call) Return(err error) *MockRepository_AddMessage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_AddMessage_Call) RunAndReturn(run func(ctx context.Context, message *model.Message, chatID string) error) *MockRepository_AddMessage_Call {
	_c.Call.Return(run)
	return _c
}

// AddMessageTx provides a mock function for the type MockRepository
func (_mock *MockRepository) AddMessageTx(ctx context.Context, tx *sql.Tx, message *model.Message, chatID string) error {
	ret := _mock.Called(ctx, tx, message, chatID)

	if len(ret) == 0 {
		panic("no return value specified for AddMessageTx")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, *model.Message, string) error); ok {
		r0 = returnFunc(ctx, tx, message, chatID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_AddMessageTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMessageTx'
type MockRepository_AddMessageTx_Call struct {
	*mock.Call
}

// AddMessageTx is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *sql.Tx
//   - message *model.Message
//   - chatID string
func (_e *MockRepository_Expecter) AddMessageTx(ctx interface{}, tx interface{}, message interface{}, chatID interface{}) *MockRepository_AddMessageTx_Call {
	return &MockRepository_AddMessageTx_Call{Call: _e.mock.On("AddMessageTx", ctx, tx, message, chatID)}
}

func (_c *MockRepository_AddMessageTx_Call) Run(run func(ctx context.Context, tx *sql.Tx, message *model.Message, chatID string)) *MockRepository_AddMessageTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *sql.Tx
		if args[1] != nil {
			arg1 = args[1].(*sql.Tx)
		}
		var arg2 *model.Message
		if args[2] != nil {
			arg2 = args[2].(*model.Message)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockRepository_AddMessageTx_Call) Return(err error) *MockRepository_AddMessageTx_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_AddMessageTx_Call) RunAndReturn(run func(ctx context.Context, tx *sql.Tx, message *model.Message, chatID string) error) *MockRepository_AddMessageTx_Call {
	_c.Call.Return(run)
	return _c
}

// BeginTx provides a mock function for the type MockRepository
func (_mock *MockRepository) BeginTx(ctx context.Context) (*sql.Tx, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 *sql.Tx
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*sql.Tx, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *sql.Tx); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_BeginTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTx'
type MockRepository_BeginTx_Call struct {
	*mock.Call
}

// BeginTx is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepository_Expecter) BeginTx(ctx interface{}) *MockRepository_BeginTx_Call {
	return &MockRepository_BeginTx_Call{Call: _e.mock.On("BeginTx", ctx)}
}

func (_c *MockRepository_BeginTx_Call) Run(run func(ctx context.Context)) *MockRepository_BeginTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_BeginTx_Call) Return(tx *sql.Tx, err error) *MockRepository_BeginTx_Call {
	_c.Call.Return(tx, err)
	return _c
}

func (_c *MockRepository_BeginTx_Call) RunAndReturn(run func(ctx context.Context) (*sql.Tx, error)) *MockRepository_BeginTx_Call {
	_c.Call.Return(run)
	return _c
}

// CreateChat provides a mock function for the type MockRepository
func (_mock *MockRepository) CreateChat(ctx context.Context, chat *model.Chat) error {
	ret := _mock.Called(ctx, chat)

	if len(ret) == 0 {
		panic("no return value specified for CreateChat")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Chat) error); ok {
		r0 = returnFunc(ctx, chat)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_CreateChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChat'
type MockRepository_CreateChat_Call struct {
	*mock.Call
}

// CreateChat is a helper method to define mock.On call
//   - ctx context.Context
//   - chat *model.Chat
func (_e *MockRepository_Expecter) CreateChat(ctx interface{}, chat interface{}) *MockRepository_CreateChat_Call {
	return &MockRepository_CreateChat_Call{Call: _e.mock.On("CreateChat", ctx, chat)}
}

func (_c *MockRepository_CreateChat_Call) Run(run func(ctx context.Context, chat *model.Chat)) *MockRepository_CreateChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.Chat
		if args[1] != nil {
			arg1 = args[1].(*model.Chat)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_CreateChat_Call) Return(err error) *MockRepository_CreateChat_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_CreateChat_Call) RunAndReturn(run func(ctx context.Context, chat *model.Chat) error) *MockRepository_CreateChat_Call {
	_c.Call.Return(run)
	return _c
}

// DeactivateBranchTx provides a mock function for the type MockRepository
func (_mock *MockRepository) DeactivateBranchTx(ctx context.Context, tx *sql.Tx, messageID string) error {
	ret := _mock.Called(ctx, tx, messageID)

	if len(ret) == 0 {
		panic("no return value specified for DeactivateBranchTx")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, string) error); ok {
		r0 = returnFunc(ctx, tx, messageID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_DeactivateBranchTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeactivateBranchTx'
type MockRepository_DeactivateBranchTx_Call struct {
	*mock.Call
}

// DeactivateBranchTx is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *sql.Tx
//   - messageID string
func (_e *MockRepository_Expecter) DeactivateBranchTx(ctx interface{}, tx interface{}, messageID interface{}) *MockRepository_DeactivateBranchTx_Call {
	return &MockRepository_DeactivateBranchTx_Call{Call: _e.mock.On("DeactivateBranchTx", ctx, tx, messageID)}
}

func (_c *MockRepository_DeactivateBranchTx_Call) Run(run func(ctx context.Context, tx *sql.Tx, messageID string)) *MockRepository_DeactivateBranchTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *sql.Tx
		if args[1] != nil {
			arg1 = args[1].(*sql.Tx)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepository_DeactivateBranchTx_Call) Return(err error) *MockRepository_DeactivateBranchTx_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_DeactivateBranchTx_Call) RunAndReturn(run func(ctx context.Context, tx *sql.Tx, messageID string) error) *MockRepository_DeactivateBranchTx_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteChat provides a mock function for the type MockRepository
func (_mock *MockRepository) DeleteChat(ctx context.Context, chatID string) error {
	ret := _mock.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChat")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, chatID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_DeleteChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteChat'
type MockRepository_DeleteChat_Call struct {
	*mock.Call
}

// DeleteChat is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID string
func (_e *MockRepository_Expecter) DeleteChat(ctx interface{}, chatID interface{}) *MockRepository_DeleteChat_Call {
	return &MockRepository_DeleteChat_Call{Call: _e.mock.On("DeleteChat", ctx, chatID)}
}

func (_c *MockRepository_DeleteChat_Call) Run(run func(ctx context.Context, chatID string)) *MockRepository_DeleteChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_DeleteChat_Call) Return(err error) *MockRepository_DeleteChat_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_DeleteChat_Call) RunAndReturn(run func(ctx context.Context, chatID string) error) *MockRepository_DeleteChat_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveMessagesByChatID provides a mock function for the type MockRepository
func (_mock *MockRepository) GetActiveMessagesByChatID(ctx context.Context, chatID string) ([]model.Message, error) {
	ret := _mock.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveMessagesByChatID")
	}

	var r0 []model.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]model.Message, error)); ok {
		return returnFunc(ctx, chatID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []model.Message); ok {
		r0 = returnFunc(ctx, chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, chatID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetActiveMessagesByChatID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveMessagesByChatID'
type MockRepository_GetActiveMessagesByChatID_Call struct {
	*mock.Call
}

// GetActiveMessagesByChatID is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID string
func (_e *MockRepository_Expecter) GetActiveMessagesByChatID(ctx interface{}, chatID interface{}) *MockRepository_GetActiveMessagesByChatID_Call {
	return &MockRepository_GetActiveMessagesByChatID_Call{Call: _e.mock.On("GetActiveMessagesByChatID", ctx, chatID)}
}

func (_c *MockRepository_GetActiveMessagesByChatID_Call) Run(run func(ctx context.Context, chatID string)) *MockRepository_GetActiveMessagesByChatID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetActiveMessagesByChatID_Call) Return(messages []model.Message, err error) *MockRepository_GetActiveMessagesByChatID_Call {
	_c.Call.Return(messages, err)
	return _c
}

func (_c *MockRepository_GetActiveMessagesByChatID_Call) RunAndReturn(run func(ctx context.Context, chatID string) ([]model.Message, error)) *MockRepository_GetActiveMessagesByChatID_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveMessagesByChatIDTx provides a mock function for the type MockRepository
func (_mock *MockRepository) GetActiveMessagesByChatIDTx(ctx context.Context, tx *sql.Tx, chatID string) ([]model.Message, error) {
	ret := _mock.Called(ctx, tx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveMessagesByChatIDTx")
	}

	var r0 []model.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, string) ([]model.Message, error)); ok {
		return returnFunc(ctx, tx, chatID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, string) []model.Message); ok {
		r0 = returnFunc(ctx, tx, chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *sql.Tx, string) error); ok {
		r1 = returnFunc(ctx, tx, chatID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetActiveMessagesByChatIDTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveMessagesByChatIDTx'
type MockRepository_GetActiveMessagesByChatIDTx_Call struct {
	*mock.Call
}

// GetActiveMessagesByChatIDTx is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *sql.Tx
//   - chatID string
func (_e *MockRepository_Expecter) GetActiveMessagesByChatIDTx(ctx interface{}, tx interface{}, chatID interface{}) *MockRepository_GetActiveMessagesByChatIDTx_Call {
	return &MockRepository_GetActiveMessagesByChatIDTx_Call{Call: _e.mock.On("GetActiveMessagesByChatIDTx", ctx, tx, chatID)}
}

func (_c *MockRepository_GetActiveMessagesByChatIDTx_Call) Run(run func(ctx context.Context, tx *sql.Tx, chatID string)) *MockRepository_GetActiveMessagesByChatIDTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *sql.Tx
		if args[1] != nil {
			arg1 = args[1].(*sql.Tx)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepository_GetActiveMessagesByChatIDTx_Call) Return(messages []model.Message, err error) *MockRepository_GetActiveMessagesByChatIDTx_Call {
	_c.Call.Return(messages, err)
	return _c
}

func (_c *MockRepository_GetActiveMessagesByChatIDTx_Call) RunAndReturn(run func(ctx context.Context, tx *sql.Tx, chatID string) ([]model.Message, error)) *MockRepository_GetActiveMessagesByChatIDTx_Call {
	_c.Call.Return(run)
	return _c
}

// GetChat provides a mock function for the type MockRepository
func (_mock *MockRepository) GetChat(ctx context.Context, chatID string) (*model.Chat, error) {
	ret := _mock.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for GetChat")
	}

	var r0 *model.Chat
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.Chat, error)); ok {
		return returnFunc(ctx, chatID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.Chat); ok {
		r0 = returnFunc(ctx, chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Chat)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, chatID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChat'
type MockRepository_GetChat_Call struct {
	*mock.Call
}

// GetChat is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID string
func (_e *MockRepository_Expecter) GetChat(ctx interface{}, chatID interface{}) *MockRepository_GetChat_Call {
	return &MockRepository_GetChat_Call{Call: _e.mock.On("GetChat", ctx, chatID)}
}

func (_c *MockRepository_GetChat_Call) Run(run func(ctx context.Context, chatID string)) *MockRepository_GetChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetChat_Call) Return(chat *model.Chat, err error) *MockRepository_GetChat_Call {
	_c.Call.Return(chat, err)
	return _c
}

func (_c *MockRepository_GetChat_Call) RunAndReturn(run func(ctx context.Context, chatID string) (*model.Chat, error)) *MockRepository_GetChat_Call {
	_c.Call.Return(run)
	return _c
}

// GetChats provides a mock function for the type MockRepository
func (_mock *MockRepository) GetChats(ctx context.Context) ([]*model.Chat, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetChats")
	}

	var r0 []*model.Chat
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*model.Chat, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*model.Chat); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Chat)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetChats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChats'
type MockRepository_GetChats_Call struct {
	*mock.Call
}

// GetChats is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepository_Expecter) GetChats(ctx interface{}) *MockRepository_GetChats_Call {
	return &MockRepository_GetChats_Call{Call: _e.mock.On("GetChats", ctx)}
}

func (_c *MockRepository_GetChats_Call) Run(run func(ctx context.Context)) *MockRepository_GetChats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_GetChats_Call) Return(chats []*model.Chat, err error) *MockRepository_GetChats_Call {
	_c.Call.Return(chats, err)
	return _c
}

func (_c *MockRepository_GetChats_Call) RunAndReturn(run func(ctx context.Context) ([]*model.Chat, error)) *MockRepository_GetChats_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastActiveMessage provides a mock function for the type MockRepository
func (_mock *MockRepository) GetLastActiveMessage(ctx context.Context, chatID string) (*model.Message, error) {
	ret := _mock.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for GetLastActiveMessage")
	}

	var r0 *model.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.Message, error)); ok {
		return returnFunc(ctx, chatID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.Message); ok {
		r0 = returnFunc(ctx, chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, chatID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetLastActiveMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastActiveMessage'
type MockRepository_GetLastActiveMessage_Call struct {
	*mock.Call
}

// GetLastActiveMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID string
func (_e *MockRepository_Expecter) GetLastActiveMessage(ctx interface{}, chatID interface{}) *MockRepository_GetLastActiveMessage_Call {
	return &MockRepository_GetLastActiveMessage_Call{Call: _e.mock.On("GetLastActiveMessage", ctx, chatID)}
}

func (_c *MockRepository_GetLastActiveMessage_Call) Run(run func(ctx context.Context, chatID string)) *MockRepository_GetLastActiveMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetLastActiveMessage_Call) Return(message *model.Message, err error) *MockRepository_GetLastActiveMessage_Call {
	_c.Call.Return(message, err)
	return _c
}

func (_c *MockRepository_GetLastActiveMessage_Call) RunAndReturn(run func(ctx context.Context, chatID string) (*model.Message, error)) *MockRepository_GetLastActiveMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessageByID provides a mock function for the type MockRepository
func (_mock *MockRepository) GetMessageByID(ctx context.Context, messageID string) (*model.Message, error) {
	ret := _mock.Called(ctx, messageID)

	if len(ret) == 0 {
		panic("no return value specified for GetMessageByID")
	}

	var r0 *model.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.Message, error)); ok {
		return returnFunc(ctx, messageID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.Message); ok {
		r0 = returnFunc(ctx, messageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, messageID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetMessageByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessageByID'
type MockRepository_GetMessageByID_Call struct {
	*mock.Call
}

// GetMessageByID is a helper method to define mock.On call
//   - ctx context.Context
//   - messageID string
func (_e *MockRepository_Expecter) GetMessageByID(ctx interface{}, messageID interface{}) *MockRepository_GetMessageByID_Call {
	return &MockRepository_GetMessageByID_Call{Call: _e.mock.On("GetMessageByID", ctx, messageID)}
}

func (_c *MockRepository_GetMessageByID_Call) Run(run func(ctx context.Context, messageID string)) *MockRepository_GetMessageByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetMessageByID_Call) Return(message *model.Message, err error) *MockRepository_GetMessageByID_Call {
	_c.Call.Return(message, err)
	return _c
}

func (_c *MockRepository_GetMessageByID_Call) RunAndReturn(run func(ctx context.Context, messageID string) (*model.Message, error)) *MockRepository_GetMessageByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateChatTimestampTx provides a mock function for the type MockRepository
func (_mock *MockRepository) UpdateChatTimestampTx(ctx context.Context, tx *sql.Tx, chatID string) error {
	ret := _mock.Called(ctx, tx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChatTimestampTx")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, string) error); ok {
		r0 = returnFunc(ctx, tx, chatID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_UpdateChatTimestampTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateChatTimestampTx'
type MockRepository_UpdateChatTimestampTx_Call struct {
	*mock.Call
}

// UpdateChatTimestampTx is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *sql.Tx
//   - chatID string
func (_e *MockRepository_Expecter) UpdateChatTimestampTx(ctx interface{}, tx interface{}, chatID interface{}) *MockRepository_UpdateChatTimestampTx_Call {
	return &MockRepository_UpdateChatTimestampTx_Call{Call: _e.mock.On("UpdateChatTimestampTx", ctx, tx, chatID)}
}

func (_c *MockRepository_UpdateChatTimestampTx_Call) Run(run func(ctx context.Context, tx *sql.Tx, chatID string)) *MockRepository_UpdateChatTimestampTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *sql.Tx
		if args[1] != nil {
			arg1 = args[1].(*sql.Tx)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepository_UpdateChatTimestampTx_Call) Return(err error) *MockRepository_UpdateChatTimestampTx_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_UpdateChatTimestampTx_Call) RunAndReturn(run func(ctx context.Context, tx *sql.Tx, chatID string) error) *MockRepository_UpdateChatTimestampTx_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateChatTitle provides a mock function for the type MockRepository
func (_mock *MockRepository) UpdateChatTitle(ctx context.Context, chatID string, newTitle string) error {
	ret := _mock.Called(ctx, chatID, newTitle)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChatTitle")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, chatID, newTitle)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_UpdateChatTitle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateChatTitle'
type MockRepository_UpdateChatTitle_Call struct {
	*mock.Call
}

// UpdateChatTitle is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID string
//   - newTitle string
func (_e *MockRepository_Expecter) UpdateChatTitle(ctx interface{}, chatID interface{}, newTitle interface{}) *MockRepository_UpdateChatTitle_Call {
	return &MockRepository_UpdateChatTitle_Call{Call: _e.mock.On("UpdateChatTitle", ctx, chatID, newTitle)}
}

func (_c *MockRepository_UpdateChatTitle_Call) Run(run func(ctx context.Context, chatID string, newTitle string)) *MockRepository_UpdateChatTitle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepository_UpdateChatTitle_Call) Return(err error) *MockRepository_UpdateChatTitle_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_UpdateChatTitle_Call) RunAndReturn(run func(ctx context.Context, chatID string, newTitle string) error) *MockRepository_UpdateChatTitle_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMessageContext provides a mock function for the type MockRepository
func (_mock *MockRepository) UpdateMessageContext(ctx context.Context, messageID string, ollamaContext []byte) error {
	ret := _mock.Called(ctx, messageID, ollamaContext)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMessageContext")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = returnFunc(ctx, messageID, ollamaContext)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_UpdateMessageContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMessageContext'
type MockRepository_UpdateMessageContext_Call struct {
	*mock.Call
}

// UpdateMessageContext is a helper method to define mock.On call
//   - ctx context.Context
//   - messageID string
//   - ollamaContext []byte
func (_e *MockRepository_Expecter) UpdateMessageContext(ctx interface{}, messageID interface{}, ollamaContext interface{}) *MockRepository_UpdateMessageContext_Call {
	return &MockRepository_UpdateMessageContext_Call{Call: _e.mock.On("UpdateMessageContext", ctx, messageID, ollamaContext)}
}

func (_c *MockRepository_UpdateMessageContext_Call) Run(run func(ctx context.Context, messageID string, ollamaContext []byte)) *MockRepository_UpdateMessageContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepository_UpdateMessageContext_Call) Return(err error) *MockRepository_UpdateMessageContext_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_UpdateMessageContext_Call) RunAndReturn(run func(ctx context.Context, messageID string, ollamaContext []byte) error) *MockRepository_UpdateMessageContext_Call {
	_c.Call.Return(run)
	return _c
}

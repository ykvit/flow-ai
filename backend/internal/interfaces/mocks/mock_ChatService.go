// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"flow-ai/backend/internal/model"
	"flow-ai/backend/internal/service"

	mock "github.com/stretchr/testify/mock"
)

// NewMockChatService creates a new instance of MockChatService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChatService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChatService {
	mock := &MockChatService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockChatService is an autogenerated mock type for the ChatService type
type MockChatService struct {
	mock.Mock
}

type MockChatService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChatService) EXPECT() *MockChatService_Expecter {
	return &MockChatService_Expecter{mock: &_m.Mock}
}

// DeleteChat provides a mock function for the type MockChatService
func (_mock *MockChatService) DeleteChat(ctx context.Context, chatID string) error {
	ret := _mock.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChat")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, chatID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockChatService_DeleteChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteChat'
type MockChatService_DeleteChat_Call struct {
	*mock.Call
}

// DeleteChat is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID string
func (_e *MockChatService_Expecter) DeleteChat(ctx interface{}, chatID interface{}) *MockChatService_DeleteChat_Call {
	return &MockChatService_DeleteChat_Call{Call: _e.mock.On("DeleteChat", ctx, chatID)}
}

func (_c *MockChatService_DeleteChat_Call) Run(run func(ctx context.Context, chatID string)) *MockChatService_DeleteChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockChatService_DeleteChat_Call) Return(err error) *MockChatService_DeleteChat_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockChatService_DeleteChat_Call) RunAndReturn(run func(ctx context.Context, chatID string) error) *MockChatService_DeleteChat_Call {
	_c.Call.Return(run)
	return _c
}

// GetFullChat provides a mock function for the type MockChatService
func (_mock *MockChatService) GetFullChat(ctx context.Context, chatID string) (*model.FullChat, error) {
	ret := _mock.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for GetFullChat")
	}

	var r0 *model.FullChat
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.FullChat, error)); ok {
		return returnFunc(ctx, chatID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.FullChat); ok {
		r0 = returnFunc(ctx, chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FullChat)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, chatID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChatService_GetFullChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFullChat'
type MockChatService_GetFullChat_Call struct {
	*mock.Call
}

// GetFullChat is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID string
func (_e *MockChatService_Expecter) GetFullChat(ctx interface{}, chatID interface{}) *MockChatService_GetFullChat_Call {
	return &MockChatService_GetFullChat_Call{Call: _e.mock.On("GetFullChat", ctx, chatID)}
}

func (_c *MockChatService_GetFullChat_Call) Run(run func(ctx context.Context, chatID string)) *MockChatService_GetFullChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockChatService_GetFullChat_Call) Return(fullChat *model.FullChat, err error) *MockChatService_GetFullChat_Call {
	_c.Call.Return(fullChat, err)
	return _c
}

func (_c *MockChatService_GetFullChat_Call) RunAndReturn(run func(ctx context.Context, chatID string) (*model.FullChat, error)) *MockChatService_GetFullChat_Call {
	_c.Call.Return(run)
	return _c
}

// HandleNewMessage provides a mock function for the type MockChatService
func (_mock *MockChatService) HandleNewMessage(ctx context.Context, req *service.CreateMessageRequest, streamChan chan<- model.StreamResponse) {
	_mock.Called(ctx, req, streamChan)
	return
}

// MockChatService_HandleNewMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleNewMessage'
type MockChatService_HandleNewMessage_Call struct {
	*mock.Call
}

// HandleNewMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - req *service.CreateMessageRequest
//   - streamChan chan<- model.StreamResponse
func (_e *MockChatService_Expecter) HandleNewMessage(ctx interface{}, req interface{}, streamChan interface{}) *MockChatService_HandleNewMessage_Call {
	return &MockChatService_HandleNewMessage_Call{Call: _e.mock.On("HandleNewMessage", ctx, req, streamChan)}
}

func (_c *MockChatService_HandleNewMessage_Call) Run(run func(ctx context.Context, req *service.CreateMessageRequest, streamChan chan<- model.StreamResponse)) *MockChatService_HandleNewMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *service.CreateMessageRequest
		if args[1] != nil {
			arg1 = args[1].(*service.CreateMessageRequest)
		}
		var arg2 chan<- model.StreamResponse
		if args[2] != nil {
			arg2 = args[2].(chan<- model.StreamResponse)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockChatService_HandleNewMessage_Call) Return() *MockChatService_HandleNewMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockChatService_HandleNewMessage_Call) RunAndReturn(run func(ctx context.Context, req *service.CreateMessageRequest, streamChan chan<- model.StreamResponse)) *MockChatService_HandleNewMessage_Call {
	_c.Run(run)
	return _c
}

// ListChats provides a mock function for the type MockChatService
func (_mock *MockChatService) ListChats(ctx context.Context) ([]*model.Chat, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListChats")
	}

	var r0 []*model.Chat
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*model.Chat, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*model.Chat); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Chat)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChatService_ListChats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListChats'
type MockChatService_ListChats_Call struct {
	*mock.Call
}

// ListChats is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockChatService_Expecter) ListChats(ctx interface{}) *MockChatService_ListChats_Call {
	return &MockChatService_ListChats_Call{Call: _e.mock.On("ListChats", ctx)}
}

func (_c *MockChatService_ListChats_Call) Run(run func(ctx context.Context)) *MockChatService_ListChats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockChatService_ListChats_Call) Return(chats []*model.Chat, err error) *MockChatService_ListChats_Call {
	_c.Call.Return(chats, err)
	return _c
}

func (_c *MockChatService_ListChats_Call) RunAndReturn(run func(ctx context.Context) ([]*model.Chat, error)) *MockChatService_ListChats_Call {
	_c.Call.Return(run)
	return _c
}

// RegenerateMessage provides a mock function for the type MockChatService
func (_mock *MockChatService) RegenerateMessage(ctx context.Context, chatID string, originalAssistantMessageID string, req *service.RegenerateMessageRequest, streamChan chan<- model.StreamResponse) {
	_mock.Called(ctx, chatID, originalAssistantMessageID, req, streamChan)
	return
}

// MockChatService_RegenerateMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegenerateMessage'
type MockChatService_RegenerateMessage_Call struct {
	*mock.Call
}

// RegenerateMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID string
//   - originalAssistantMessageID string
//   - req *service.RegenerateMessageRequest
//   - streamChan chan<- model.StreamResponse
func (_e *MockChatService_Expecter) RegenerateMessage(ctx interface{}, chatID interface{}, originalAssistantMessageID interface{}, req interface{}, streamChan interface{}) *MockChatService_RegenerateMessage_Call {
	return &MockChatService_RegenerateMessage_Call{Call: _e.mock.On("RegenerateMessage", ctx, chatID, originalAssistantMessageID, req, streamChan)}
}

func (_c *MockChatService_RegenerateMessage_Call) Run(run func(ctx context.Context, chatID string, originalAssistantMessageID string, req *service.RegenerateMessageRequest, streamChan chan<- model.StreamResponse)) *MockChatService_RegenerateMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 *service.RegenerateMessageRequest
		if args[3] != nil {
			arg3 = args[3].(*service.RegenerateMessageRequest)
		}
		var arg4 chan<- model.StreamResponse
		if args[4] != nil {
			arg4 = args[4].(chan<- model.StreamResponse)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockChatService_RegenerateMessage_Call) Return() *MockChatService_RegenerateMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockChatService_RegenerateMessage_Call) RunAndReturn(run func(ctx context.Context, chatID string, originalAssistantMessageID string, req *service.RegenerateMessageRequest, streamChan chan<- model.StreamResponse)) *MockChatService_RegenerateMessage_Call {
	_c.Run(run)
	return _c
}

// UpdateChatTitle provides a mock function for the type MockChatService
func (_mock *MockChatService) UpdateChatTitle(ctx context.Context, chatID string, newTitle string) error {
	ret := _mock.Called(ctx, chatID, newTitle)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChatTitle")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, chatID, newTitle)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockChatService_UpdateChatTitle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateChatTitle'
type MockChatService_UpdateChatTitle_Call struct {
	*mock.Call
}

// UpdateChatTitle is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID string
//   - newTitle string
func (_e *MockChatService_Expecter) UpdateChatTitle(ctx interface{}, chatID interface{}, newTitle interface{}) *MockChatService_UpdateChatTitle_Call {
	return &MockChatService_UpdateChatTitle_Call{Call: _e.mock.On("UpdateChatTitle", ctx, chatID, newTitle)}
}

func (_c *MockChatService_UpdateChatTitle_Call) Run(run func(ctx context.Context, chatID string, newTitle string)) *MockChatService_UpdateChatTitle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockChatService_UpdateChatTitle_Call) Return(err error) *MockChatService_UpdateChatTitle_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockChatService_UpdateChatTitle_Call) RunAndReturn(run func(ctx context.Context, chatID string, newTitle string) error) *MockChatService_UpdateChatTitle_Call {
	_c.Call.Return(run)
	return _c
}

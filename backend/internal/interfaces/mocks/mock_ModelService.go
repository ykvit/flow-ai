// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"flow-ai/backend/internal/llm"

	mock "github.com/stretchr/testify/mock"
)

// NewMockModelService creates a new instance of MockModelService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockModelService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModelService {
	mock := &MockModelService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockModelService is an autogenerated mock type for the ModelService type
type MockModelService struct {
	mock.Mock
}

type MockModelService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockModelService) EXPECT() *MockModelService_Expecter {
	return &MockModelService_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockModelService
func (_mock *MockModelService) Delete(ctx context.Context, req *llm.DeleteModelRequest) error {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *llm.DeleteModelRequest) error); ok {
		r0 = returnFunc(ctx, req)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockModelService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockModelService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - req *llm.DeleteModelRequest
func (_e *MockModelService_Expecter) Delete(ctx interface{}, req interface{}) *MockModelService_Delete_Call {
	return &MockModelService_Delete_Call{Call: _e.mock.On("Delete", ctx, req)}
}

func (_c *MockModelService_Delete_Call) Run(run func(ctx context.Context, req *llm.DeleteModelRequest)) *MockModelService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *llm.DeleteModelRequest
		if args[1] != nil {
			arg1 = args[1].(*llm.DeleteModelRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockModelService_Delete_Call) Return(err error) *MockModelService_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockModelService_Delete_Call) RunAndReturn(run func(ctx context.Context, req *llm.DeleteModelRequest) error) *MockModelService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockModelService
func (_mock *MockModelService) List(ctx context.Context) (*llm.ListModelsResponse, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *llm.ListModelsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*llm.ListModelsResponse, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *llm.ListModelsResponse); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*llm.ListModelsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockModelService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockModelService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockModelService_Expecter) List(ctx interface{}) *MockModelService_List_Call {
	return &MockModelService_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockModelService_List_Call) Run(run func(ctx context.Context)) *MockModelService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockModelService_List_Call) Return(listModelsResponse *llm.ListModelsResponse, err error) *MockModelService_List_Call {
	_c.Call.Return(listModelsResponse, err)
	return _c
}

func (_c *MockModelService_List_Call) RunAndReturn(run func(ctx context.Context) (*llm.ListModelsResponse, error)) *MockModelService_List_Call {
	_c.Call.Return(run)
	return _c
}

// Pull provides a mock function for the type MockModelService
func (_mock *MockModelService) Pull(ctx context.Context, req *llm.PullModelRequest, ch chan<- llm.PullStatus) error {
	ret := _mock.Called(ctx, req, ch)

	if len(ret) == 0 {
		panic("no return value specified for Pull")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *llm.PullModelRequest, chan<- llm.PullStatus) error); ok {
		r0 = returnFunc(ctx, req, ch)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockModelService_Pull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pull'
type MockModelService_Pull_Call struct {
	*mock.Call
}

// Pull is a helper method to define mock.On call
//   - ctx context.Context
//   - req *llm.PullModelRequest
//   - ch chan<- llm.PullStatus
func (_e *MockModelService_Expecter) Pull(ctx interface{}, req interface{}, ch interface{}) *MockModelService_Pull_Call {
	return &MockModelService_Pull_Call{Call: _e.mock.On("Pull", ctx, req, ch)}
}

func (_c *MockModelService_Pull_Call) Run(run func(ctx context.Context, req *llm.PullModelRequest, ch chan<- llm.PullStatus)) *MockModelService_Pull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *llm.PullModelRequest
		if args[1] != nil {
			arg1 = args[1].(*llm.PullModelRequest)
		}
		var arg2 chan<- llm.PullStatus
		if args[2] != nil {
			arg2 = args[2].(chan<- llm.PullStatus)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockModelService_Pull_Call) Return(err error) *MockModelService_Pull_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockModelService_Pull_Call) RunAndReturn(run func(ctx context.Context, req *llm.PullModelRequest, ch chan<- llm.PullStatus) error) *MockModelService_Pull_Call {
	_c.Call.Return(run)
	return _c
}

// Show provides a mock function for the type MockModelService
func (_mock *MockModelService) Show(ctx context.Context, req *llm.ShowModelRequest) (*llm.ModelInfo, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Show")
	}

	var r0 *llm.ModelInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *llm.ShowModelRequest) (*llm.ModelInfo, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *llm.ShowModelRequest) *llm.ModelInfo); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*llm.ModelInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *llm.ShowModelRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockModelService_Show_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Show'
type MockModelService_Show_Call struct {
	*mock.Call
}

// Show is a helper method to define mock.On call
//   - ctx context.Context
//   - req *llm.ShowModelRequest
func (_e *MockModelService_Expecter) Show(ctx interface{}, req interface{}) *MockModelService_Show_Call {
	return &MockModelService_Show_Call{Call: _e.mock.On("Show", ctx, req)}
}

func (_c *MockModelService_Show_Call) Run(run func(ctx context.Context, req *llm.ShowModelRequest)) *MockModelService_Show_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *llm.ShowModelRequest
		if args[1] != nil {
			arg1 = args[1].(*llm.ShowModelRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockModelService_Show_Call) Return(modelInfo *llm.ModelInfo, err error) *MockModelService_Show_Call {
	_c.Call.Return(modelInfo, err)
	return _c
}

func (_c *MockModelService_Show_Call) RunAndReturn(run func(ctx context.Context, req *llm.ShowModelRequest) (*llm.ModelInfo, error)) *MockModelService_Show_Call {
	_c.Call.Return(run)
	return _c
}

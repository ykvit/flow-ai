// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"flow-ai/backend/internal/service"

	mock "github.com/stretchr/testify/mock"
)

// NewMockSettingsService creates a new instance of MockSettingsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSettingsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSettingsService {
	mock := &MockSettingsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSettingsService is an autogenerated mock type for the SettingsService type
type MockSettingsService struct {
	mock.Mock
}

type MockSettingsService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSettingsService) EXPECT() *MockSettingsService_Expecter {
	return &MockSettingsService_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type MockSettingsService
func (_mock *MockSettingsService) Get(ctx context.Context) (*service.Settings, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *service.Settings
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*service.Settings, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *service.Settings); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Settings)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSettingsService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSettingsService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSettingsService_Expecter) Get(ctx interface{}) *MockSettingsService_Get_Call {
	return &MockSettingsService_Get_Call{Call: _e.mock.On("Get", ctx)}
}

func (_c *MockSettingsService_Get_Call) Run(run func(ctx context.Context)) *MockSettingsService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSettingsService_Get_Call) Return(settings *service.Settings, err error) *MockSettingsService_Get_Call {
	_c.Call.Return(settings, err)
	return _c
}

func (_c *MockSettingsService_Get_Call) RunAndReturn(run func(ctx context.Context) (*service.Settings, error)) *MockSettingsService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// InitAndGet provides a mock function for the type MockSettingsService
func (_mock *MockSettingsService) InitAndGet(ctx context.Context, defaultSystemPrompt string) (*service.Settings, error) {
	ret := _mock.Called(ctx, defaultSystemPrompt)

	if len(ret) == 0 {
		panic("no return value specified for InitAndGet")
	}

	var r0 *service.Settings
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*service.Settings, error)); ok {
		return returnFunc(ctx, defaultSystemPrompt)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *service.Settings); ok {
		r0 = returnFunc(ctx, defaultSystemPrompt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Settings)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, defaultSystemPrompt)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSettingsService_InitAndGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitAndGet'
type MockSettingsService_InitAndGet_Call struct {
	*mock.Call
}

// InitAndGet is a helper method to define mock.On call
//   - ctx context.Context
//   - defaultSystemPrompt string
func (_e *MockSettingsService_Expecter) InitAndGet(ctx interface{}, defaultSystemPrompt interface{}) *MockSettingsService_InitAndGet_Call {
	return &MockSettingsService_InitAndGet_Call{Call: _e.mock.On("InitAndGet", ctx, defaultSystemPrompt)}
}

func (_c *MockSettingsService_InitAndGet_Call) Run(run func(ctx context.Context, defaultSystemPrompt string)) *MockSettingsService_InitAndGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSettingsService_InitAndGet_Call) Return(settings *service.Settings, err error) *MockSettingsService_InitAndGet_Call {
	_c.Call.Return(settings, err)
	return _c
}

func (_c *MockSettingsService_InitAndGet_Call) RunAndReturn(run func(ctx context.Context, defaultSystemPrompt string) (*service.Settings, error)) *MockSettingsService_InitAndGet_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockSettingsService
func (_mock *MockSettingsService) Save(ctx context.Context, settings *service.Settings) error {
	ret := _mock.Called(ctx, settings)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *service.Settings) error); ok {
		r0 = returnFunc(ctx, settings)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSettingsService_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockSettingsService_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - settings *service.Settings
func (_e *MockSettingsService_Expecter) Save(ctx interface{}, settings interface{}) *MockSettingsService_Save_Call {
	return &MockSettingsService_Save_Call{Call: _e.mock.On("Save", ctx, settings)}
}

func (_c *MockSettingsService_Save_Call) Run(run func(ctx context.Context, settings *service.Settings)) *MockSettingsService_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *service.Settings
		if args[1] != nil {
			arg1 = args[1].(*service.Settings)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSettingsService_Save_Call) Return(err error) *MockSettingsService_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSettingsService_Save_Call) RunAndReturn(run func(ctx context.Context, settings *service.Settings) error) *MockSettingsService_Save_Call {
	_c.Call.Return(run)
	return _c
}

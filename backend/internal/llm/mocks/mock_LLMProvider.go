// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"flow-ai/backend/internal/llm"

	mock "github.com/stretchr/testify/mock"
)

// NewMockLLMProvider creates a new instance of MockLLMProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLLMProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLLMProvider {
	mock := &MockLLMProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLLMProvider is an autogenerated mock type for the LLMProvider type
type MockLLMProvider struct {
	mock.Mock
}

type MockLLMProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLLMProvider) EXPECT() *MockLLMProvider_Expecter {
	return &MockLLMProvider_Expecter{mock: &_m.Mock}
}

// DeleteModel provides a mock function for the type MockLLMProvider
func (_mock *MockLLMProvider) DeleteModel(ctx context.Context, req *llm.DeleteModelRequest) error {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteModel")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *llm.DeleteModelRequest) error); ok {
		r0 = returnFunc(ctx, req)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLLMProvider_DeleteModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteModel'
type MockLLMProvider_DeleteModel_Call struct {
	*mock.Call
}

// DeleteModel is a helper method to define mock.On call
//   - ctx context.Context
//   - req *llm.DeleteModelRequest
func (_e *MockLLMProvider_Expecter) DeleteModel(ctx interface{}, req interface{}) *MockLLMProvider_DeleteModel_Call {
	return &MockLLMProvider_DeleteModel_Call{Call: _e.mock.On("DeleteModel", ctx, req)}
}

func (_c *MockLLMProvider_DeleteModel_Call) Run(run func(ctx context.Context, req *llm.DeleteModelRequest)) *MockLLMProvider_DeleteModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *llm.DeleteModelRequest
		if args[1] != nil {
			arg1 = args[1].(*llm.DeleteModelRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLLMProvider_DeleteModel_Call) Return(err error) *MockLLMProvider_DeleteModel_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLLMProvider_DeleteModel_Call) RunAndReturn(run func(ctx context.Context, req *llm.DeleteModelRequest) error) *MockLLMProvider_DeleteModel_Call {
	_c.Call.Return(run)
	return _c
}

// Generate provides a mock function for the type MockLLMProvider
func (_mock *MockLLMProvider) Generate(ctx context.Context, req *llm.GenerateRequest) (*llm.GenerateResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 *llm.GenerateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *llm.GenerateRequest) (*llm.GenerateResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *llm.GenerateRequest) *llm.GenerateResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*llm.GenerateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *llm.GenerateRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLLMProvider_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type MockLLMProvider_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - ctx context.Context
//   - req *llm.GenerateRequest
func (_e *MockLLMProvider_Expecter) Generate(ctx interface{}, req interface{}) *MockLLMProvider_Generate_Call {
	return &MockLLMProvider_Generate_Call{Call: _e.mock.On("Generate", ctx, req)}
}

func (_c *MockLLMProvider_Generate_Call) Run(run func(ctx context.Context, req *llm.GenerateRequest)) *MockLLMProvider_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *llm.GenerateRequest
		if args[1] != nil {
			arg1 = args[1].(*llm.GenerateRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLLMProvider_Generate_Call) Return(generateResponse *llm.GenerateResponse, err error) *MockLLMProvider_Generate_Call {
	_c.Call.Return(generateResponse, err)
	return _c
}

func (_c *MockLLMProvider_Generate_Call) RunAndReturn(run func(ctx context.Context, req *llm.GenerateRequest) (*llm.GenerateResponse, error)) *MockLLMProvider_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateStream provides a mock function for the type MockLLMProvider
func (_mock *MockLLMProvider) GenerateStream(ctx context.Context, req *llm.GenerateRequest, ch chan<- llm.StreamResponse) error {
	ret := _mock.Called(ctx, req, ch)

	if len(ret) == 0 {
		panic("no return value specified for GenerateStream")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *llm.GenerateRequest, chan<- llm.StreamResponse) error); ok {
		r0 = returnFunc(ctx, req, ch)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLLMProvider_GenerateStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateStream'
type MockLLMProvider_GenerateStream_Call struct {
	*mock.Call
}

// GenerateStream is a helper method to define mock.On call
//   - ctx context.Context
//   - req *llm.GenerateRequest
//   - ch chan<- llm.StreamResponse
func (_e *MockLLMProvider_Expecter) GenerateStream(ctx interface{}, req interface{}, ch interface{}) *MockLLMProvider_GenerateStream_Call {
	return &MockLLMProvider_GenerateStream_Call{Call: _e.mock.On("GenerateStream", ctx, req, ch)}
}

func (_c *MockLLMProvider_GenerateStream_Call) Run(run func(ctx context.Context, req *llm.GenerateRequest, ch chan<- llm.StreamResponse)) *MockLLMProvider_GenerateStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *llm.GenerateRequest
		if args[1] != nil {
			arg1 = args[1].(*llm.GenerateRequest)
		}
		var arg2 chan<- llm.StreamResponse
		if args[2] != nil {
			arg2 = args[2].(chan<- llm.StreamResponse)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockLLMProvider_GenerateStream_Call) Return(err error) *MockLLMProvider_GenerateStream_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLLMProvider_GenerateStream_Call) RunAndReturn(run func(ctx context.Context, req *llm.GenerateRequest, ch chan<- llm.StreamResponse) error) *MockLLMProvider_GenerateStream_Call {
	_c.Call.Return(run)
	return _c
}

// ListModels provides a mock function for the type MockLLMProvider
func (_mock *MockLLMProvider) ListModels(ctx context.Context) (*llm.ListModelsResponse, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListModels")
	}

	var r0 *llm.ListModelsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*llm.ListModelsResponse, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *llm.ListModelsResponse); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*llm.ListModelsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLLMProvider_ListModels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListModels'
type MockLLMProvider_ListModels_Call struct {
	*mock.Call
}

// ListModels is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLLMProvider_Expecter) ListModels(ctx interface{}) *MockLLMProvider_ListModels_Call {
	return &MockLLMProvider_ListModels_Call{Call: _e.mock.On("ListModels", ctx)}
}

func (_c *MockLLMProvider_ListModels_Call) Run(run func(ctx context.Context)) *MockLLMProvider_ListModels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLLMProvider_ListModels_Call) Return(listModelsResponse *llm.ListModelsResponse, err error) *MockLLMProvider_ListModels_Call {
	_c.Call.Return(listModelsResponse, err)
	return _c
}

func (_c *MockLLMProvider_ListModels_Call) RunAndReturn(run func(ctx context.Context) (*llm.ListModelsResponse, error)) *MockLLMProvider_ListModels_Call {
	_c.Call.Return(run)
	return _c
}

// PullModel provides a mock function for the type MockLLMProvider
func (_mock *MockLLMProvider) PullModel(ctx context.Context, req *llm.PullModelRequest, ch chan<- llm.PullStatus) error {
	ret := _mock.Called(ctx, req, ch)

	if len(ret) == 0 {
		panic("no return value specified for PullModel")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *llm.PullModelRequest, chan<- llm.PullStatus) error); ok {
		r0 = returnFunc(ctx, req, ch)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLLMProvider_PullModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PullModel'
type MockLLMProvider_PullModel_Call struct {
	*mock.Call
}

// PullModel is a helper method to define mock.On call
//   - ctx context.Context
//   - req *llm.PullModelRequest
//   - ch chan<- llm.PullStatus
func (_e *MockLLMProvider_Expecter) PullModel(ctx interface{}, req interface{}, ch interface{}) *MockLLMProvider_PullModel_Call {
	return &MockLLMProvider_PullModel_Call{Call: _e.mock.On("PullModel", ctx, req, ch)}
}

func (_c *MockLLMProvider_PullModel_Call) Run(run func(ctx context.Context, req *llm.PullModelRequest, ch chan<- llm.PullStatus)) *MockLLMProvider_PullModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *llm.PullModelRequest
		if args[1] != nil {
			arg1 = args[1].(*llm.PullModelRequest)
		}
		var arg2 chan<- llm.PullStatus
		if args[2] != nil {
			arg2 = args[2].(chan<- llm.PullStatus)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockLLMProvider_PullModel_Call) Return(err error) *MockLLMProvider_PullModel_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLLMProvider_PullModel_Call) RunAndReturn(run func(ctx context.Context, req *llm.PullModelRequest, ch chan<- llm.PullStatus) error) *MockLLMProvider_PullModel_Call {
	_c.Call.Return(run)
	return _c
}

// ShowModelInfo provides a mock function for the type MockLLMProvider
func (_mock *MockLLMProvider) ShowModelInfo(ctx context.Context, req *llm.ShowModelRequest) (*llm.ModelInfo, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ShowModelInfo")
	}

	var r0 *llm.ModelInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *llm.ShowModelRequest) (*llm.ModelInfo, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *llm.ShowModelRequest) *llm.ModelInfo); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*llm.ModelInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *llm.ShowModelRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLLMProvider_ShowModelInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowModelInfo'
type MockLLMProvider_ShowModelInfo_Call struct {
	*mock.Call
}

// ShowModelInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - req *llm.ShowModelRequest
func (_e *MockLLMProvider_Expecter) ShowModelInfo(ctx interface{}, req interface{}) *MockLLMProvider_ShowModelInfo_Call {
	return &MockLLMProvider_ShowModelInfo_Call{Call: _e.mock.On("ShowModelInfo", ctx, req)}
}

func (_c *MockLLMProvider_ShowModelInfo_Call) Run(run func(ctx context.Context, req *llm.ShowModelRequest)) *MockLLMProvider_ShowModelInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *llm.ShowModelRequest
		if args[1] != nil {
			arg1 = args[1].(*llm.ShowModelRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLLMProvider_ShowModelInfo_Call) Return(modelInfo *llm.ModelInfo, err error) *MockLLMProvider_ShowModelInfo_Call {
	_c.Call.Return(modelInfo, err)
	return _c
}

func (_c *MockLLMProvider_ShowModelInfo_Call) RunAndReturn(run func(ctx context.Context, req *llm.ShowModelRequest) (*llm.ModelInfo, error)) *MockLLMProvider_ShowModelInfo_Call {
	_c.Call.Return(run)
	return _c
}

name: "CI Pipeline"

on:
  pull_request:
    branches: ["main"]
  push:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Set default permissions for the GITHUB_TOKEN for security
permissions:
  contents: read
  security-events: write # For Trivy SARIF upload
  actions: read         # For SARIF upload
  pull-requests: write  # For Codecov PR comments

jobs:
  # --------------------------------------------------------------------------
  # Job 1 (Parallel): Fast Go code quality checks
  # --------------------------------------------------------------------------
  quality-checks:
    name: Go Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7

      - name: Set up Go
        uses: actions/setup-go@v5.0.2
        with:
          go-version: '1.23'
          cache: true
          cache-dependency-path: 'backend/go.sum'

      - name: Check Go code formatting
        working-directory: backend
        run: |
          go install golang.org/x/tools/cmd/goimports@v0.21.0
          UNFORMATTED=$(goimports -l .)
          if [ -n "$UNFORMATTED" ]; then
            echo "❌ The following files are not formatted correctly:"
            echo "$UNFORMATTED"
            echo ""
            echo "Run 'make format' locally to fix formatting issues."
            exit 1
          fi
          echo "✅ All Go files are properly formatted."

      - name: Lint Go code
        uses: golangci/golangci-lint-action@v6.1.0
        with:
          version: v1.60.1
          working-directory: backend
          args: --verbose ./...

      - name: Run Go vulnerability scanner (gosec)
        working-directory: backend
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec -exclude=G302 ./...

  # --------------------------------------------------------------------------
  # Job 2 (Parallel): Frontend checks and build
  # --------------------------------------------------------------------------
  frontend-ci:
    name: Frontend CI
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7

      - name: Set up Node.js
        uses: actions/setup-node@v4.0.3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Check TypeScript types
        # Activated type checking - a crucial step for TS projects
        working-directory: frontend
        run: npm run typecheck

      - name: Build frontend
        working-directory: frontend
        run: npm run build

  # --------------------------------------------------------------------------
  # Job 3: Backend integration tests with Docker Compose
  # --------------------------------------------------------------------------
  backend-testing:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        go-version: ['1.23']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7

      - name: Set up Go
        uses: actions/setup-go@v5.0.2
        with:
          go-version: ${{ matrix.go-version }}

      - name: Create .env file from example
        run: cp .env.example .env

      - name: Run backend integration tests
        run: make test-ci

      - name: Generate test summary
        if: always()
        run: |
          echo "## 🧪 Backend Tests (Go ${{ matrix.go-version }})" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          if [ -f coverage/coverage.out ]; then
            echo "**Coverage:** \`$(go tool cover -func=coverage/coverage.out | tail -1)\`" >> $GITHUB_STEP_SUMMARY
          fi
        
      - name: Upload coverage to Codecov
        if: github.repository == 'ykvit/flow-ai' && secrets.CODECOV_TOKEN != ''
        uses: codecov/codecov-action@v4.5.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage.out
          flags: backend

  # --------------------------------------------------------------------------
  # Job 4: Build and scan production Docker image
  # --------------------------------------------------------------------------
  build-and-scan-docker:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [backend-testing, frontend-ci]
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.4.0

      - name: Create .env file from example
        run: cp .env.example .env

      - name: Build production Docker image
        uses: docker/build-push-action@v6.5.0
        with:
          context: .
          target: final
          push: false
          tags: flow-ai-ci:${{ github.sha }}
          load: true

      - name: Scan Docker image with Trivy (SARIF & JSON)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: 'flow-ai-ci:${{ github.sha }}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
      
      - name: Upload Trivy SARIF results to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3.25.11
        with:
          sarif_file: 'trivy-results.sarif'

  # --------------------------------------------------------------------------
  # Job 5: Dependency review (PRs only)
  # --------------------------------------------------------------------------
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7
      
      - name: Review dependencies for vulnerabilities
        uses: actions/dependency-review-action@v4.3.4
        with:
          fail-on-severity: high